import React, { createContext, useContext, ReactNode } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useAuth, type User, type Tenant } from '../../hooks/useAuth';\n\n// Create a query client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: (failureCount, error: any) => {\n        // Don't retry on auth errors\n        if (error?.message?.includes('401') || error?.message?.includes('Unauthorized')) {\n          return false;\n        }\n        return failureCount < 3;\n      },\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 10 * 60 * 1000, // 10 minutes\n    },\n  },\n});\n\nexport interface AuthContextType {\n  user: User | null;\n  tenant: Tenant | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string, rememberMe?: boolean) => Promise<void>;\n  register: (name: string, email: string, password: string, tenantName: string) => Promise<void>;\n  logout: () => Promise<void>;\n  changePassword: (currentPassword: string, newPassword: string) => Promise<void>;\n  getAccessToken: () => string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function useAuthContext(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n}\n\nfunction AuthContextProvider({ children }: { children: ReactNode }) {\n  const auth = useAuth();\n\n  const contextValue: AuthContextType = {\n    user: auth.user,\n    tenant: auth.tenant,\n    isAuthenticated: auth.isAuthenticated,\n    isLoading: auth.isLoading,\n    login: async (email: string, password: string, rememberMe = false) => {\n      await auth.login({ email, password, rememberMe });\n    },\n    register: async (name: string, email: string, password: string, tenantName: string) => {\n      await auth.register({ name, email, password, tenantName });\n    },\n    logout: auth.logout,\n    changePassword: auth.changePassword,\n    getAccessToken: auth.getAccessToken,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport interface AuthProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Root authentication provider that wraps the entire application\n * Provides both React Query client and authentication context\n */\nexport function AuthProvider({ children }: AuthProviderProps) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthContextProvider>{children}</AuthContextProvider>\n    </QueryClientProvider>\n  );\n}"