import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\nimport { TrendingUp, TrendingDown, Activity, Users, Zap, Clock } from 'lucide-react';\n\ninterface MetricCard {\n  title: string;\n  value: string | number;\n  change?: number;\n  trend?: 'up' | 'down' | 'stable';\n  icon: React.ReactNode;\n  color: string;\n}\n\ninterface ChartData {\n  name: string;\n  value: number;\n  timestamp?: string;\n}\n\ninterface MetricsDashboardProps {\n  timeRange?: '1h' | '24h' | '7d' | '30d';\n  refreshInterval?: number;\n  tenantId?: string;\n}\n\nexport const MetricsDashboard: React.FC<MetricsDashboardProps> = ({\n  timeRange = '24h',\n  refreshInterval = 30000,\n  tenantId\n}) => {\n  const [metrics, setMetrics] = useState<MetricCard[]>([]);\n  const [requestsData, setRequestsData] = useState<ChartData[]>([]);\n  const [responseTimeData, setResponseTimeData] = useState<ChartData[]>([]);\n  const [errorDistribution, setErrorDistribution] = useState<ChartData[]>([]);\n  const [topEndpoints, setTopEndpoints] = useState<ChartData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedTimeRange, setSelectedTimeRange] = useState(timeRange);\n\n  const fetchMetricsData = async () => {\n    try {\n      const params = new URLSearchParams({\n        timeRange: selectedTimeRange,\n        ...(tenantId && { tenantId })\n      });\n\n      const [metricsRes, requestsRes, responseTimeRes, errorsRes, endpointsRes] = await Promise.all([\n        fetch(`/api/metrics/summary?${params}`),\n        fetch(`/api/metrics/requests?${params}`),\n        fetch(`/api/metrics/response-time?${params}`),\n        fetch(`/api/metrics/errors?${params}`),\n        fetch(`/api/metrics/endpoints?${params}`)\n      ]);\n\n      if (metricsRes.ok) {\n        const data = await metricsRes.json();\n        setMetrics([\n          {\n            title: 'Total Requests',\n            value: data.totalRequests?.toLocaleString() || '0',\n            change: data.requestsChange || 0,\n            trend: data.requestsChange > 0 ? 'up' : data.requestsChange < 0 ? 'down' : 'stable',\n            icon: <Activity className=\"w-6 h-6\" />,\n            color: 'text-blue-600'\n          },\n          {\n            title: 'Active Users',\n            value: data.activeUsers?.toLocaleString() || '0',\n            change: data.usersChange || 0,\n            trend: data.usersChange > 0 ? 'up' : data.usersChange < 0 ? 'down' : 'stable',\n            icon: <Users className=\"w-6 h-6\" />,\n            color: 'text-green-600'\n          },\n          {\n            title: 'Avg Response Time',\n            value: `${data.avgResponseTime || 0}ms`,\n            change: data.responseTimeChange || 0,\n            trend: data.responseTimeChange < 0 ? 'up' : data.responseTimeChange > 0 ? 'down' : 'stable', // Lower is better for response time\n            icon: <Clock className=\"w-6 h-6\" />,\n            color: 'text-purple-600'\n          },\n          {\n            title: 'Error Rate',\n            value: `${(data.errorRate || 0).toFixed(2)}%`,\n            change: data.errorRateChange || 0,\n            trend: data.errorRateChange < 0 ? 'up' : data.errorRateChange > 0 ? 'down' : 'stable', // Lower is better for error rate\n            icon: <Zap className=\"w-6 h-6\" />,\n            color: 'text-red-600'\n          }\n        ]);\n      }\n\n      if (requestsRes.ok) {\n        const data = await requestsRes.json();\n        setRequestsData(data.map((item: any) => ({\n          name: new Date(item.timestamp).toLocaleDateString(),\n          value: item.count,\n          timestamp: item.timestamp\n        })));\n      }\n\n      if (responseTimeRes.ok) {\n        const data = await responseTimeRes.json();\n        setResponseTimeData(data.map((item: any) => ({\n          name: new Date(item.timestamp).toLocaleDateString(),\n          value: item.avgResponseTime,\n          timestamp: item.timestamp\n        })));\n      }\n\n      if (errorsRes.ok) {\n        const data = await errorsRes.json();\n        setErrorDistribution(data.map((item: any) => ({\n          name: item.errorType,\n          value: item.count\n        })));\n      }\n\n      if (endpointsRes.ok) {\n        const data = await endpointsRes.json();\n        setTopEndpoints(data.slice(0, 10).map((item: any) => ({\n          name: item.endpoint.length > 30 ? item.endpoint.substring(0, 30) + '...' : item.endpoint,\n          value: item.count\n        })));\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.error('Failed to fetch metrics:', error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMetricsData();\n    const interval = setInterval(fetchMetricsData, refreshInterval);\n    return () => clearInterval(interval);\n  }, [selectedTimeRange, refreshInterval, tenantId]);\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <div className=\"w-4 h-4\" />;\n    }\n  };\n\n  const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7c7c', '#8dd1e1'];\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6 animate-pulse\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"bg-gray-200 h-32 rounded-lg\"></div>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"bg-gray-200 h-64 rounded-lg\"></div>\n          <div className=\"bg-gray-200 h-64 rounded-lg\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Time Range Selector */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Real-time Metrics</h2>\n        <div className=\"flex space-x-2\">\n          {['1h', '24h', '7d', '30d'].map((range) => (\n            <button\n              key={range}\n              onClick={() => setSelectedTimeRange(range as any)}\n              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${\n                selectedTimeRange === range\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {range}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Metric Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {metrics.map((metric, index) => (\n          <div key={index} className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className={metric.color}>\n                {metric.icon}\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                {getTrendIcon(metric.trend!)}\n                {metric.change && (\n                  <span className={`text-sm font-medium ${\n                    metric.trend === 'up' ? 'text-green-600' : \n                    metric.trend === 'down' ? 'text-red-600' : 'text-gray-600'\n                  }`}>\n                    {metric.change > 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                  </span>\n                )}\n              </div>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900\">{metric.value}</p>\n              <p className=\"text-sm text-gray-600\">{metric.title}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Requests Over Time */}\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <h3 className=\"text-lg font-semibold mb-4\">Requests Over Time</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={requestsData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"value\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={2}\n                  dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Response Time */}\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <h3 className=\"text-lg font-semibold mb-4\">Average Response Time</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={responseTimeData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip formatter={(value) => [`${value}ms`, 'Response Time']} />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"value\" \n                  stroke=\"#8b5cf6\" \n                  strokeWidth={2}\n                  dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 4 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Top Endpoints */}\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <h3 className=\"text-lg font-semibold mb-4\">Top Endpoints</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={topEndpoints}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"name\" \n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                  interval={0}\n                />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"#10b981\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Error Distribution */}\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n          <h3 className=\"text-lg font-semibold mb-4\">Error Distribution</h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={errorDistribution}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={100}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {errorDistribution.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n          <div className=\"mt-4 space-y-2\">\n            {errorDistribution.map((entry, index) => (\n              <div key={entry.name} className=\"flex items-center justify-between text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <div \n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                  ></div>\n                  <span>{entry.name}</span>\n                </div>\n                <span className=\"font-medium\">{entry.value}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Real-time Updates Indicator */}\n      <div className=\"flex items-center justify-center text-sm text-gray-500\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n          <span>Live data • Updates every {refreshInterval / 1000}s</span>\n        </div>\n      </div>\n    </div>\n  );\n};