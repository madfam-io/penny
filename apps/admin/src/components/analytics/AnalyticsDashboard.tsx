import React, { useState, useEffect } from 'react';\nimport { Card } from '../ui/card';\nimport { Tabs } from '../ui/tabs';\nimport { UserAnalytics } from './UserAnalytics';\nimport { UsageAnalytics } from './UsageAnalytics';\nimport { RevenueAnalytics } from './RevenueAnalytics';\nimport { AIInsights } from './AIInsights';\nimport { CustomReports } from './CustomReports';\nimport { BarChart3, Users, DollarSign, Brain, FileText, TrendingUp, AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface DashboardMetrics {\n  totalUsers: number;\n  activeUsers: number;\n  revenue: number;\n  apiCalls: number;\n  errorRate: number;\n  uptime: number;\n  trends: {\n    users: number;\n    revenue: number;\n    usage: number;\n  };\n}\n\ninterface AnalyticsDashboardProps {\n  tenantId?: string;\n}\n\nexport const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ tenantId }) => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const fetchDashboardMetrics = async () => {\n    try {\n      setRefreshing(true);\n      const params = tenantId ? `?tenantId=${tenantId}` : '';\n      const response = await fetch(`/api/admin/analytics/dashboard${params}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setMetrics(data);\n      }\n    } catch (error) {\n      console.error('Failed to fetch dashboard metrics:', error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDashboardMetrics();\n    // Refresh every 5 minutes\n    const interval = setInterval(fetchDashboardMetrics, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [tenantId]);\n\n  const formatNumber = (num: number): string => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    }\n    if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num.toLocaleString();\n  };\n\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getTrendIcon = (trend: number) => {\n    if (trend > 0) {\n      return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n    }\n    return <TrendingUp className=\"w-4 h-4 text-red-500 rotate-180\" />;\n  };\n\n  const getTrendColor = (trend: number) => {\n    return trend > 0 ? 'text-green-600' : 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: BarChart3 },\n    { id: 'users', label: 'Users', icon: Users },\n    { id: 'usage', label: 'Usage', icon: BarChart3 },\n    { id: 'revenue', label: 'Revenue', icon: DollarSign },\n    { id: 'insights', label: 'AI Insights', icon: Brain },\n    { id: 'reports', label: 'Reports', icon: FileText }\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Analytics Dashboard</h1>\n          <p className=\"text-gray-600\">\n            {tenantId ? `Tenant: ${tenantId}` : 'Platform-wide analytics'}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={fetchDashboardMetrics}\n            className={`px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors ${\n              refreshing ? 'animate-pulse' : ''\n            }`}\n            disabled={refreshing}\n          >\n            {refreshing ? 'Refreshing...' : 'Refresh Data'}\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      {metrics && activeTab === 'overview' && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                {getTrendIcon(metrics.trends.users)}\n                <span className={`text-sm font-medium ${getTrendColor(metrics.trends.users)}`}>\n                  {metrics.trends.users > 0 ? '+' : ''}{metrics.trends.users.toFixed(1)}%\n                </span>\n              </div>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatNumber(metrics.totalUsers)}\n              </p>\n              <p className=\"text-sm text-gray-600\">Total Users</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {formatNumber(metrics.activeUsers)} active today\n              </p>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                {getTrendIcon(metrics.trends.revenue)}\n                <span className={`text-sm font-medium ${getTrendColor(metrics.trends.revenue)}`}>\n                  {metrics.trends.revenue > 0 ? '+' : ''}{metrics.trends.revenue.toFixed(1)}%\n                </span>\n              </div>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(metrics.revenue)}\n              </p>\n              <p className=\"text-sm text-gray-600\">Monthly Revenue</p>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <BarChart3 className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                {getTrendIcon(metrics.trends.usage)}\n                <span className={`text-sm font-medium ${getTrendColor(metrics.trends.usage)}`}>\n                  {metrics.trends.usage > 0 ? '+' : ''}{metrics.trends.usage.toFixed(1)}%\n                </span>\n              </div>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatNumber(metrics.apiCalls)}\n              </p>\n              <p className=\"text-sm text-gray-600\">API Calls (30d)</p>\n            </div>\n          </Card>\n\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                {metrics.errorRate < 1 ? (\n                  <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                ) : (\n                  <AlertCircle className=\"w-6 h-6 text-orange-600\" />\n                )}\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xs text-gray-500\">Uptime</p>\n                <p className=\"text-sm font-medium text-gray-900\">\n                  {(metrics.uptime * 100).toFixed(2)}%\n                </p>\n              </div>\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {metrics.errorRate.toFixed(2)}%\n              </p>\n              <p className=\"text-sm text-gray-600\">Error Rate</p>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"flex space-x-8\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <span>{tab.label}</span>\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"mt-6\">\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Quick overview components can go here */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Platform Overview</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-blue-600\">\n                    {metrics ? formatNumber(metrics.totalUsers) : '0'}\n                  </p>\n                  <p className=\"text-gray-600\">Total Users</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-green-600\">\n                    {metrics ? formatCurrency(metrics.revenue) : '$0'}\n                  </p>\n                  <p className=\"text-gray-600\">Monthly Revenue</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-purple-600\">\n                    {metrics ? formatNumber(metrics.apiCalls) : '0'}\n                  </p>\n                  <p className=\"text-gray-600\">API Calls</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        )}\n        \n        {activeTab === 'users' && <UserAnalytics tenantId={tenantId} />}\n        {activeTab === 'usage' && <UsageAnalytics tenantId={tenantId} />}\n        {activeTab === 'revenue' && <RevenueAnalytics tenantId={tenantId} />}\n        {activeTab === 'insights' && <AIInsights tenantId={tenantId} />}\n        {activeTab === 'reports' && <CustomReports tenantId={tenantId} />}\n      </div>\n    </div>\n  );\n};"