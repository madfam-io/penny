version: '3.9'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: penny-postgres
    environment:
      POSTGRES_USER: penny
      POSTGRES_PASSWORD: penny
      POSTGRES_DB: penny
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U penny"]
      interval: 10s
      timeout: 5s
      retries: 5

  valkey:
    image: valkey/valkey:7-alpine
    container_name: penny-valkey
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
    command: valkey-server --appendonly yes
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: penny-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: penny-jaeger
    ports:
      - "16686:16686"
      - "4318:4318"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16686/"]
      interval: 10s
      timeout: 5s
      retries: 5

  ollama:
    image: ollama/ollama:latest
    container_name: penny-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # WebSocket Service
  websocket:
    build:
      context: .
      dockerfile: apps/ws/Dockerfile
    container_name: penny-websocket
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      WS_PORT: 3003
      WS_HOST: 0.0.0.0
      REDIS_HOST: valkey
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_AUDIENCE: penny-users
      JWT_ISSUER: penny-auth
      CORS_ORIGIN: http://localhost:3000,http://localhost:5173
      # Rate limiting configuration
      RATE_LIMIT_GLOBAL_POINTS: 1000
      RATE_LIMIT_GLOBAL_DURATION: 60000
      RATE_LIMIT_SOCKET_POINTS: 100
      RATE_LIMIT_SOCKET_DURATION: 60000
      RATE_LIMIT_ROOM_POINTS: 500
      RATE_LIMIT_ROOM_DURATION: 60000
      # Heartbeat configuration
      HEARTBEAT_INTERVAL: 25000
      HEARTBEAT_TIMEOUT: 60000
    depends_on:
      valkey:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  postgres_data:
  valkey_data:
  minio_data:
  ollama_data: