generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== TENANT & USER ====================

model Tenant {
  id                  String              @id @default(cuid())
  name                String
  slug                String              @unique
  logo                String?
  favicon             String?
  primaryColor        String              @default("#3b82f6")
  customCss           String?
  settings            Json                @default("{}")
  features            Json                @default("{}")
  limits              Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  users               User[]
  workspaces          Workspace[]
  conversations       Conversation[]
  artifacts           Artifact[]
  tools               Tool[]
  datasources         DataSource[]
  apiKeys             ApiKey[]
  auditLogs           AuditLog[]
  usageMetrics        UsageMetric[]
  subscriptions       Subscription[]
  webhooks            Webhook[]
  usageRecords        Usage[]
  
  @@index([slug])
}

model User {
  id                  String              @id @default(cuid())
  tenantId            String
  email               String
  emailVerified       DateTime?
  name                String
  passwordHash        String?
  avatar              String?
  locale              String              @default("en")
  timezone            String              @default("UTC")
  theme               String              @default("system")
  preferences         Json                @default("{}")
  lastLoginAt         DateTime?
  isActive            Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roles               UserRole[]
  accounts            Account[]
  sessions            Session[]
  conversations       Conversation[]
  messages            Message[]
  artifacts           Artifact[]
  apiKeys             ApiKey[]
  auditLogs           AuditLog[]
  notifications       Notification[]
  
  @@unique([tenantId, email])
  @@index([tenantId])
  @@index([email])
}

model Role {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  permissions         Json                @default("[]")
  isSystem            Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  users               UserRole[]
  
  @@unique([name])
}

model UserRole {
  id                  String              @id @default(cuid())
  userId              String
  roleId              String
  workspaceId         String?
  assignedAt          DateTime            @default(now())
  assignedBy          String?
  
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  role                Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  workspace           Workspace?          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId, workspaceId])
  @@index([userId])
  @@index([roleId])
  @@index([workspaceId])
}

model Account {
  id                String              @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id                  String              @id @default(cuid())
  sessionToken        String              @unique
  userId              String
  expires             DateTime
  token               String?             @unique
  refreshToken        String?             @unique
  ipAddress           String?
  userAgent           String?
  deviceId            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
  @@index([token])
  @@index([refreshToken])
}

model VerificationToken {
  identifier        String
  token             String              @unique
  expires           DateTime
  
  @@unique([identifier, token])
  @@index([token])
}

// ==================== WORKSPACE & COLLABORATION ====================

model Workspace {
  id                  String              @id @default(cuid())
  tenantId            String
  name                String
  description         String?
  isDefault           Boolean             @default(false)
  settings            Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations       Conversation[]
  userRoles           UserRole[]
  
  @@unique([tenantId, name])
  @@index([tenantId])
}

// ==================== CONVERSATIONS & MESSAGES ====================

model Conversation {
  id                  String              @id @default(cuid())
  tenantId            String
  workspaceId         String
  userId              String
  title               String?
  summary             String?
  metadata            Json                @default("{}")
  isArchived          Boolean             @default(false)
  archivedAt          DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace           Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages            Message[]
  artifacts           Artifact[]
  memories            Memory[]
  
  @@index([tenantId])
  @@index([workspaceId])
  @@index([userId])
  @@index([createdAt])
}

model Message {
  id                  String              @id @default(cuid())
  conversationId      String
  userId              String?
  role                String              // user, assistant, system, tool
  content             String
  metadata            Json                @default("{}")
  parentMessageId     String?
  toolCalls           Json?
  tokenCount          Int                 @default(0)
  createdAt           DateTime            @default(now())
  
  conversation        Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user                User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  parentMessage       Message?            @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies             Message[]           @relation("MessageReplies")
  artifacts           Artifact[]
  
  // Composite index for efficient conversation message queries
  @@index([conversationId, createdAt(sort: Desc)])
  @@index([conversationId])
  @@index([userId])
  @@index([createdAt])
}

model Memory {
  id                  String              @id @default(cuid())
  conversationId      String
  key                 String
  value               String
  embedding           Unsupported("vector")?
  metadata            Json                @default("{}")
  expiresAt           DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  conversation        Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, key])
  @@index([conversationId])
  @@index([expiresAt])
}

// ==================== ARTIFACTS ====================

model Artifact {
  id                  String              @id @default(cuid())
  tenantId            String
  conversationId      String?
  messageId           String?
  userId              String
  type                String              // text, markdown, chart, dashboard, image, document
  mimeType            String
  name                String
  description         String?
  content             Json?               // For small artifacts
  storageUrl          String?             // For large artifacts
  size                Int                 @default(0)
  metadata            Json                @default("{}")
  parentArtifactId    String?
  version             Int                 @default(1)
  isPublic            Boolean             @default(false)
  viewCount           Int                 @default(0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversation        Conversation?       @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message             Message?            @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentArtifact      Artifact?           @relation("ArtifactVersions", fields: [parentArtifactId], references: [id])
  versions            Artifact[]          @relation("ArtifactVersions")
  
  @@index([tenantId])
  @@index([conversationId])
  @@index([messageId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// ==================== TOOLS & INTEGRATIONS ====================

model Tool {
  id                  String              @id @default(cuid())
  tenantId            String?
  name                String              @unique
  displayName         String
  description         String
  category            String
  icon                String?
  schema              Json                // JSON Schema for parameters
  config              Json                @default("{}")
  isSystem            Boolean             @default(false)
  isEnabled           Boolean             @default(true)
  requiresAuth        Boolean             @default(false)
  requiresConfirm     Boolean             @default(false)
  maxExecutions       Int?
  timeout             Int                 @default(30000)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant?             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  executions          ToolExecution[]
  
  @@index([tenantId])
  @@index([category])
  @@index([isEnabled])
}

model ToolExecution {
  id                  String              @id @default(cuid())
  toolId              String
  userId              String
  conversationId      String?
  status              String              // pending, running, completed, failed
  parameters          Json
  result              Json?
  error               String?
  startedAt           DateTime            @default(now())
  completedAt         DateTime?
  duration            Int?                // milliseconds
  metadata            Json                @default("{}")
  
  tool                Tool                @relation(fields: [toolId], references: [id], onDelete: Cascade)
  
  // Composite indexes for common query patterns
  @@index([userId, status, startedAt(sort: Desc)])
  @@index([toolId, status])
  @@index([conversationId, startedAt(sort: Desc)])
  @@index([toolId])
  @@index([userId])
  @@index([conversationId])
  @@index([status])
  @@index([startedAt])
}

// ==================== DATA SOURCES ====================

model DataSource {
  id                  String              @id @default(cuid())
  tenantId            String
  name                String
  type                String              // postgres, mysql, bigquery, snowflake, api
  config              Json                // Encrypted connection details
  isActive            Boolean             @default(true)
  lastSyncAt          DateTime?
  syncSchedule        String?             // Cron expression
  metadata            Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  documents           Document[]
  
  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([type])
}

model Document {
  id                  String              @id @default(cuid())
  dataSourceId        String
  externalId          String?
  title               String
  content             String
  contentHash         String
  embedding           Unsupported("vector")?
  metadata            Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  dataSource          DataSource          @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  
  @@unique([dataSourceId, externalId])
  @@index([dataSourceId])
  @@index([contentHash])
}

// ==================== API & SECURITY ====================

model ApiKey {
  id                  String              @id @default(cuid())
  tenantId            String
  userId              String
  name                String
  keyHash             String              @unique
  lastUsedAt          DateTime?
  expiresAt           DateTime?
  scopes              Json                @default("[]")
  metadata            Json                @default("{}")
  createdAt           DateTime            @default(now())
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([userId])
  @@index([keyHash])
  @@index([expiresAt])
}

// ==================== MONITORING & AUDIT ====================

model AuditLog {
  id                  String              @id @default(cuid())
  tenantId            String
  userId              String?
  action              String
  resource            String
  resourceId          String?
  metadata            Json                @default("{}")
  ipAddress           String?
  userAgent           String?
  timestamp           DateTime            @default(now())
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

model UsageMetric {
  id                  String              @id @default(cuid())
  tenantId            String
  metric              String              // tokens, messages, tools, storage
  value               Int
  unit                String              // count, bytes, milliseconds
  metadata            Json                @default("{}")
  timestamp           DateTime            @default(now())
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([metric])
  @@index([timestamp])
}

// ==================== BILLING & SUBSCRIPTIONS ====================

model Subscription {
  id                  String              @id @default(cuid())
  tenantId            String
  planId              String
  status              String              // active, inactive, canceled, past_due, trialing
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean             @default(false)
  canceledAt          DateTime?
  trialStart          DateTime?
  trialEnd            DateTime?
  billingCycle        String              // monthly, yearly
  pricePerMonth       Int                 // in cents
  currency            String              @default("USD")
  limits              Json                @default("{}")
  metadata            Json                @default("{}")
  stripeSubscriptionId String?            @unique
  stripeCustomerId    String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoices            Invoice[]
  
  @@unique([tenantId])
  @@index([tenantId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model Invoice {
  id                  String              @id @default(cuid())
  subscriptionId      String
  tenantId            String
  number              String              @unique
  status              String              // draft, open, paid, void, uncollectible
  total               Int                 // in cents
  subtotal            Int                 // in cents
  tax                 Int                 @default(0) // in cents
  currency            String              @default("USD")
  dueDate             DateTime
  paidAt              DateTime?
  voidedAt            DateTime?
  hostedInvoiceUrl    String?
  invoicePdf          String?
  metadata            Json                @default("{}")
  stripeInvoiceId     String?             @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  subscription        Subscription        @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  lineItems           InvoiceLineItem[]
  
  @@index([subscriptionId])
  @@index([tenantId])
  @@index([status])
  @@index([dueDate])
}

model InvoiceLineItem {
  id                  String              @id @default(cuid())
  invoiceId           String
  description         String
  quantity            Int
  unitPrice           Int                 // in cents
  total               Int                 // in cents
  metadata            Json                @default("{}")
  
  invoice             Invoice             @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
}

// ==================== WEBHOOKS ====================

model Webhook {
  id                  String              @id @default(cuid())
  tenantId            String
  url                 String
  events              Json                @default("[]") // Array of event types
  secret              String
  isActive            Boolean             @default(true)
  maxRetries          Int                 @default(3)
  retryInterval       Int                 @default(1000) // milliseconds
  lastTriggeredAt     DateTime?
  metadata            Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deliveries          WebhookDelivery[]
  
  @@index([tenantId])
  @@index([isActive])
}

model WebhookDelivery {
  id                  String              @id @default(cuid())
  webhookId           String
  event               String
  payload             Json
  headers             Json                @default("{}")
  status              String              // pending, delivered, failed
  httpStatus          Int?
  response            String?
  error               String?
  attempt             Int                 @default(1)
  nextRetryAt         DateTime?
  deliveredAt         DateTime?
  createdAt           DateTime            @default(now())
  
  webhook             Webhook             @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@index([webhookId])
  @@index([status])
  @@index([event])
  @@index([nextRetryAt])
  @@index([createdAt])
}

// ==================== USAGE TRACKING ====================

model Usage {
  id                  String              @id @default(cuid())
  tenantId            String
  userId              String?
  resourceType        String              // messages, tokens, tools, storage, api_calls
  resourceId          String?             // conversation_id, tool_id, etc.
  quantity            Int
  unit                String              // count, tokens, bytes, milliseconds
  cost                Int?                // in cents
  metadata            Json                @default("{}")
  billingPeriod       String?             // YYYY-MM format
  timestamp           DateTime            @default(now())
  
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([userId])
  @@index([resourceType])
  @@index([billingPeriod])
  @@index([timestamp])
}

// ==================== NOTIFICATIONS ====================

model Notification {
  id                  String              @id @default(cuid())
  userId              String
  type                String              // info, warning, error, success
  title               String
  message             String
  data                Json?               @default("{}")
  isRead              Boolean             @default(false)
  readAt              DateTime?
  expiresAt           DateTime?
  createdAt           DateTime            @default(now())
  
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
  @@index([expiresAt])
}

// ==================== FEATURE FLAGS ====================

model FeatureFlag {
  id                  String              @id @default(cuid())
  key                 String              @unique
  name                String
  description         String?
  isEnabled           Boolean             @default(false)
  conditions          Json                @default("{}")
  rolloutPercentage   Int                 @default(0)
  metadata            Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  overrides           FeatureFlagOverride[]
  
  @@index([key])
  @@index([isEnabled])
}

model FeatureFlagOverride {
  id                  String              @id @default(cuid())
  featureFlagId       String
  tenantId            String?
  userId              String?
  isEnabled           Boolean
  conditions          Json                @default("{}")
  createdAt           DateTime            @default(now())
  
  featureFlag         FeatureFlag         @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  
  @@unique([featureFlagId, tenantId, userId])
  @@index([featureFlagId])
  @@index([tenantId])
  @@index([userId])
}